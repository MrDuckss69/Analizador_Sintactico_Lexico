Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS
    FOR
    IF
    LEQ
    NUMBER
    PLUS
    PRINTLN
    RESERVED
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> INT MAIN LPAREN RPAREN LBRACE declarations RBRACE
Rule 2     declarations -> declaration
Rule 3     declarations -> declaration declarations
Rule 4     declaration -> INT FREE SEMICOLON

Terminals, with rules where they appear

EQUALS               : 
FOR                  : 
FREE                 : 4
IF                   : 
INT                  : 1 4
LBRACE               : 1
LEQ                  : 
LPAREN               : 1
MAIN                 : 1
NUMBER               : 
PLUS                 : 
PRINTLN              : 
RBRACE               : 1
RESERVED             : 
RPAREN               : 1
SEMICOLON            : 4
STRING               : 
error                : 

Nonterminals, with rules where they appear

declaration          : 2 3
declarations         : 1 3
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . INT MAIN LPAREN RPAREN LBRACE declarations RBRACE

    INT             shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> INT . MAIN LPAREN RPAREN LBRACE declarations RBRACE

    MAIN            shift and go to state 3


state 3

    (1) program -> INT MAIN . LPAREN RPAREN LBRACE declarations RBRACE

    LPAREN          shift and go to state 4


state 4

    (1) program -> INT MAIN LPAREN . RPAREN LBRACE declarations RBRACE

    RPAREN          shift and go to state 5


state 5

    (1) program -> INT MAIN LPAREN RPAREN . LBRACE declarations RBRACE

    LBRACE          shift and go to state 6


state 6

    (1) program -> INT MAIN LPAREN RPAREN LBRACE . declarations RBRACE
    (2) declarations -> . declaration
    (3) declarations -> . declaration declarations
    (4) declaration -> . INT FREE SEMICOLON

    INT             shift and go to state 7

    declarations                   shift and go to state 8
    declaration                    shift and go to state 9

state 7

    (4) declaration -> INT . FREE SEMICOLON

    FREE            shift and go to state 10


state 8

    (1) program -> INT MAIN LPAREN RPAREN LBRACE declarations . RBRACE

    RBRACE          shift and go to state 11


state 9

    (2) declarations -> declaration .
    (3) declarations -> declaration . declarations
    (2) declarations -> . declaration
    (3) declarations -> . declaration declarations
    (4) declaration -> . INT FREE SEMICOLON

    RBRACE          reduce using rule 2 (declarations -> declaration .)
    INT             shift and go to state 7

    declaration                    shift and go to state 9
    declarations                   shift and go to state 12

state 10

    (4) declaration -> INT FREE . SEMICOLON

    SEMICOLON       shift and go to state 13


state 11

    (1) program -> INT MAIN LPAREN RPAREN LBRACE declarations RBRACE .

    $end            reduce using rule 1 (program -> INT MAIN LPAREN RPAREN LBRACE declarations RBRACE .)


state 12

    (3) declarations -> declaration declarations .

    RBRACE          reduce using rule 3 (declarations -> declaration declarations .)


state 13

    (4) declaration -> INT FREE SEMICOLON .

    INT             reduce using rule 4 (declaration -> INT FREE SEMICOLON .)
    RBRACE          reduce using rule 4 (declaration -> INT FREE SEMICOLON .)

